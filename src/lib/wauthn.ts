import { client, server } from '@passwordless-id/webauthn'

async function challenge() {
  if (!window.PublicKeyCredential) {
    return
  }
  const expected = {
    name: 'MyUsername',
    challenge: 'random-challenge-base64-encoded', // whatever was randomly generated by the server
    origin: window.location.origin,
    userVerified: true, // no function allowed here
  }
  const credential = {
    id: 'zYQ3_KVoSauPft7jXEgvMwTObl8',
    publicKey:
      'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEm4NAydjKvtRMFuuAZdJkSNTLKGSbOTC6xR5zX4LR9P4ESM07HOQgH_ByNujQOyOVuUJT0gmWjQ3hPc8UQhRgog==',
    algorithm: 'ES256',
  } as const

  // const register = await client.register(expected.name, expected.challenge)
  // console.log(register)

  const authenticate = await client.authenticate([], expected.challenge, {
    authenticatorType: 'auto',
    userVerification: 'required',
    timeout: 60000,
  })
  console.log(authenticate)

  const registrationParsed = await server.verifyAuthentication(authenticate, credential, {
    ...expected,
    challenge: async (challenge: string) => {
      console.log(challenge)
      /* async call to DB for example */
      return true
    },
  })
  console.log(registrationParsed)
}
